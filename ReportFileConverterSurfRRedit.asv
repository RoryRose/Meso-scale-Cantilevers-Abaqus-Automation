
% function outputmatrix = ReportFileConverterSurf

%% Settings
% clc
%clear
% close all
ScatterORInt = 'Int'; % 'Int'
PlotTF = false;

%% Reading Data
[file, path] = uigetfile('Select the report file:','MultiSelect','on');
%%
if isa(file,'char') == true
    file = cellstr(file);
end

outPutArray = nan(length(file),1);
NameArray = transpose(string(file));
figure
Lines_6=cell(length(file),1);
parfor FileNum = 1:length(file)
    Lines_6{FileNum}= DataExtract(path,file,FileNum);
end
    %% PostProcessing
figure
parfor FileNum = 1:length(file)
    Lines_7pre = Lines_6{FileNum}(~isnan(Lines_6{FileNum}(:,2)),:);
    MissingData = Lines_7pre(isnan(Lines_7pre(:,6)),:);
    % Lines_7 = Lines_7pre;
    Lines_7 = Lines_7pre(~isnan(Lines_7pre(:,6)),:);


    shp = alphaShape(Lines_7(:,3),Lines_7(:,4));
    shp.Alpha = 1.50*10^-5;
    inmask1 = inpolygon(Lines_7(:,3),Lines_7(:,4),shp.Points(:,1),shp.Points(:,2));


    COOR1 = Lines_7(:,3);
    COOR2 = Lines_7(:,4);
    COOR3 = Lines_7(:,5);
    SMises = Lines_7(:,6);
    S11 = Lines_7(:,7);
    S22 = Lines_7(:,8);
    S33 = Lines_7(:,9);
    S12 = Lines_7(:,10);
    S13 = Lines_7(:,11);
    S23 = Lines_7(:,12);

    Quantity2Plot = S11;

    MinXY = min(min(COOR1),min(COOR2));
    MaxXY = max(max(COOR1),max(COOR2));


    x = COOR1;
    y = COOR2;
    v = Quantity2Plot;

    npts = length(x); % Number of points
    % round((length(x)^0.5))

    [~,IndXMax] = max(x);

    switch ScatterORInt
        case 'Int'
            % [xg,yg] = meshgrid(linspace(MinXY,MaxXY,100));
            A=600;%number of columns/rows in the grid
            [xg,yg] = meshgrid(linspace(min(x),max(x),A),linspace(min(y),max(y),A));
            F = scatteredInterpolant(x,y,v);
            vg = F(xg,yg);

            b = boundary(x,y);
            inmask = inpolygon(xg(:),yg(:), x(b),y(b));
            vg(~inmask) = nan;
            xg_new = xg(~inmask);
            yg_new = yg(~inmask);
            % MinXY = min(min(x),min(y));
            % MaxXY = max(max(x),max(y));
            % [xg,yg] = meshgrid(linspace(MinXY,MaxXY,300));
            % F = scatteredInterpolant(x,y,v);
            % vg = F(xg,yg);

            if PlotTF == true
                subplot(4,length(file)/2,FileNum);
                h = pcolor(xg,yg,vg);%pcolor(xg,yg,vg);
                colormap jet
                h.EdgeColor = 'none';
                %c = colorbar;
                xlimvec = [min(xg(inmask)),max(xg(inmask))];
                ylimvec = [min(yg(inmask)),max(yg(inmask))];
                xlim(xlimvec);
                ylim(ylimvec);
                title(strcat('seed size = ',extractBetween(file{FileNum},"A1-","-seedstress")));
            end

            % dt = delaunayTriangulation(x,y);
            % [K,v] = convexHull(dt);
            % xp = x(K);
            % yp = y(K);
            % inmask = inpolygon(x(:),y(:), xp,yp);
            % v(~inmask) = nan;
            % % h = trisurf(dt.ConnectivityList,x,y,zeros(length(v),1),v);
            % h = trisurf(K,x,y,zeros(length(v),1),v);
            % h.FaceColor = 'interp';
            % % h.EdgeColor = 'none';
            % view(2)
            % colorbar
            hold on
            % plot(shp);
        otherwise
    %         scatter(x,y,36,v,'filled');
            if PlotTF == true
                subplot(2,length(file),FileNum+length(file));
                scatter(x,y,36,[0,0,0],'x');
                %c = colorbar;
                title(strcat('seed size = ',extractBetween(file{FileNum},"A1-","-seedstress")));
            end
    end

    if PlotTF == true
        % c.Ticks = [linspace(round(min(v)),round(max(v)),10),0];

        % plot(xg(1,:),vg(300,:));

        caxis([round(min(vg(300,:))) round(min(vg(300,:))+1e8)])

        % A = min(vg(300,:));
        % B = min(v);
    end

    % end
    % RPTRead('C:\Users\rober\Documents\GitHub\Meso-scale-Cantilevers-Abaqus-Automation\Example Rpt files\Direct_Dynamicstress-dist.rpt');
    %% Find angle of beam
    ACOOR1 = MissingData(:,3)+MissingData(:,14); %deformed coordinate x1
    ACOOR2 = MissingData(:,4)+MissingData(:,15);%deformed coordinate x2
    ACOOR3 = MissingData(:,5) + MissingData(:,16);%deformed coordinate x3
    Angle = atan((ACOOR3(2,1)-ACOOR3(1,1))/(ACOOR1(2,1)-ACOOR1(1,1)));%angle in radian *180/pi%angle in degrees
    grad = (ACOOR3(2,1)-ACOOR3(1,1))/(ACOOR1(2,1)-ACOOR1(1,1));%angle in degrees
    %% creating histogram of stres
    Grid_Area = (max(x)-min(x))*(max(y)-min(y))/(A^2);
    countvals = nnz(~isnan(xg));
    idx = ~isnan(vg);
    totalArea = countvals*Grid_Area;
    [N,edges] = histcounts(vg(idx), 'Normalization', 'probability');%histcounts(vg(idx)./Angle, 'Normalization', 'probability');
    xbar = edges(1:numel(N)) + mean(diff(edges))/2;
    subplot(2,length(file),FileNum+length(file));
    bar(xbar, N)
    grid
    yt = get(gca, 'YTick'); 
    ytix = linspace(min(yt), max(yt), 10);
    %set(gca, 'YTick',ytix, 'YTickLabel',fix(ytix*totalArea/max(yt)))
    ytickformat('%.2f')
    xlabel('Stress/angle(Pa)')
    ylabel('Fraction of Area')
    title(strcat('seed size = ',extractBetween(file{FileNum},"A1-","-seedstress")));
    [maxValue,maxIndex] = max(N);
    maxPaPerRad = abs(mean([edges(maxIndex),edges(maxIndex+1)]));
    outPutArray(FileNum) = maxPaPerRad;
    %pause(3);
    %close all
    fprintf('%d Done!\n',FileNum);
end
%%
outPutTable = table(NameArray,outPutArray);
for FileNum = 1:length(file)
    seedstress(FileNum)=FileNum;
end
figure
subplot(1,2,1);
scatter(seedstress,outPutArray)
hold on
yline(mean(outPutArray),'b')
xlabel('sample number')
ylabel('stress/angle(Pa/Rad) of maximum area')
xlim([0,length(file)+1]);
hold off
subplot(1,2,2);
hist(outPutArray)
xlabel('stress/angle(Pa/Rad) of maximum area');
ylabel('counts');
thickness = [];
data2=readtable('C:\Users\User\OneDrive - Nexus365\Part II\Testing Protocol Group Project\Abaqus Results\Final Direct Dynamic\parameters.csv');
for FileNum = 1:length(file)
    thickness(FileNum) = str2double(cell2mat(extractBetween(file{FileNum},"t-",".rpt")));
end
figure
scatter(data2.h1,outPutArray)
data2.stressperangle=outPutArray;
corrplot(data2)
%%
function LinesString = py2string(filename,permission)
    % Helped by the following URLs:
    % https://uk.mathworks.com/matlabcentral/answers/417112-how-to-write-from-a-python-file-to-another-python-script-modify-the-new-python-script-and-save-it-i
    % https://uk.mathworks.com/help/matlab/ref/feof.html
    FID = fopen(filename,permission);
    LinesString = strings(0,1);
    while ~feof(FID)
       LinesString(end+1,1) = fgetl(FID);
    end
    fclose(FID);
end

function [array_var,array_val] = VarReader(InputStringArray)
    currVarNum = 1;
    for i = 1:length(InputStringArray)
        checkRow = char(InputStringArray(i));
        if checkRow(1) ~= '#'
            curr_row = split(InputStringArray(i),' ',2);
            array_var(currVarNum,1) = curr_row(1);
            array_val(currVarNum,1) = curr_row(3);
            currVarNum = currVarNum + 1;
        else
            fprintf('Row "%d" is detected as a comment...\n',i);
            continue
        end
    end
end
function [Lines_6]= DataExtract(path,file,FileNum)
    filename = fullfile(path,file{FileNum});
    Lines_1 = py2string(filename,'r');
    Lines_2a = Lines_1(24:end);
    Lines_2 = replace(Lines_2a,'No Value','NaN');
    endline = find((Lines_2 == ''), 1, 'first');

    for i = 1:endline-1
        current_row = Lines_2(i);
        Lines_3 = split(current_row,' ',2);
        curr_num = 1;
        for j = 1:length(Lines_3)
            curr_Val = Lines_3(j); 
            if strcmp(curr_Val,"") == false
                if curr_num == 1
                    curr_line = string(curr_Val);
                else
                    curr_line = horzcat(curr_line,curr_Val);
                end
                curr_num = curr_num+1;
            end
        end

        if i == 1
            Lines_4 = join(curr_line);
        else
            Lines_4 = vertcat(Lines_4,join(curr_line));
        end

        Lines_5 = split(Lines_4,' ',2);
        Lines_6 = double(Lines_5);
        
    end
    fprintf('%d Extracted\n',FileNum);
end
%     Lines_4 = erase(Lines_3,"");
% %     Lines_4 = Lines_3(find(~isspace(Lines_3)));
%     Lines_4 = Lines_3;
% %     Lines_4(strcmp(Lines_3, ' ')) = [];
%     Lines_4(all(strcmp(Lines_4,""),2),:) = [];
%     Lines_4 = rmmissing(Lines_4, 'MinNumMissing', size(Lines_4,2));
%     Lines_5(i) = Lines_3;